name: SCONE Tools Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  basic-checks:
    runs-on: ubuntu-latest
    name: Basic Code Quality Checks
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        # Install BCC dependencies for import checking
        sudo apt-get update
        sudo apt-get install -y python3-bpfcc
    
    - name: Python syntax check
      run: |
        python -m py_compile scone.py
        echo "‚úÖ Python syntax is valid"
    
    - name: Python linting with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 scone.py --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all other issues as warnings
        flake8 scone.py --count --max-complexity=10 --max-line-length=88 --statistics || true
    
    - name: Check Python imports
      run: |
        python -c "
        import sys
        try:
            from bcc import BPF
            from bcc.utils import printb
            import signal
            import time
            print('‚úÖ All Python imports successful')
        except ImportError as e:
            print(f'‚ö†Ô∏è  Import warning: {e}')
            print('This is expected in CI environment without full eBPF support')
        "

  ebpf-compilation:
    runs-on: ubuntu-latest
    name: eBPF Code Compilation Test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install eBPF development tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          clang \
          llvm \
          libbpf-dev \
          linux-headers-generic \
          build-essential
    
    - name: Test eBPF compilation
      run: |
        # Test if the eBPF C code compiles without errors
        clang -O2 -target bpf -c scone_ebpf.c -o scone_ebpf.o
        echo "‚úÖ eBPF code compiled successfully"
        
        # Check for common eBPF issues
        echo "üìä Checking eBPF code structure..."
        if grep -q "SEC(" scone_ebpf.c; then
          echo "‚úÖ Found eBPF sections"
        fi
        
        if grep -q "bpf_" scone_ebpf.c; then
          echo "‚úÖ Found BPF helper functions"
        fi

  shell-script-validation:
    runs-on: ubuntu-latest
    name: Shell Script Validation
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install shellcheck
      run: sudo apt-get update && sudo apt-get install -y shellcheck
    
    - name: Validate shell scripts
      run: |
        echo "üîç Checking shell script syntax..."
        bash -n scone_demo.sh
        echo "‚úÖ Shell script syntax is valid"
        
        echo "üîç Running shellcheck..."
        shellcheck scone_demo.sh || true
        
        echo "üîç Checking for required commands in script..."
        commands=("ip" "tcpdump" "python3")
        for cmd in "${commands[@]}"; do
          if grep -q "$cmd" scone_demo.sh; then
            echo "‚úÖ Found usage of $cmd command"
          fi
        done

  documentation-check:
    runs-on: ubuntu-latest
    name: Documentation and Structure Check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check project structure
      run: |
        echo "üìÅ Checking project structure..."
        
        required_files=("README.md" "scone.py" "scone_ebpf.c" "scone_demo.sh")
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ Found required file: $file"
          else
            echo "‚ùå Missing required file: $file"
            exit 1
          fi
        done
        
        echo "üìñ Checking README content..."
        if grep -q "Prerequisites" README.md; then
          echo "‚úÖ README contains prerequisites section"
        fi
        
        if grep -q "Running Examples" README.md; then
          echo "‚úÖ README contains usage examples"
        fi

  limited-functionality-test:
    runs-on: ubuntu-latest
    name: Limited Functionality Test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python and dependencies  
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-bpfcc python3-pip
        pip3 install --upgrade pip
    
    - name: Test script argument handling
      run: |
        echo "üß™ Testing Python script argument validation..."
        
        # Test with insufficient arguments (should fail gracefully)
        if python3 scone.py 2>&1 | grep -q "IndexError\|list index out of range"; then
          echo "‚úÖ Script properly handles missing arguments"
        else
          echo "‚ö†Ô∏è  Script argument handling may need review"
        fi
        
        # Test help functionality if available
        python3 -c "
        import sys
        sys.path.append('.')
        try:
            exec(open('scone.py').read())
        except (IndexError, SystemExit):
            print('‚úÖ Script exits appropriately with missing args')
        except Exception as e:
            print(f'‚ö†Ô∏è  Unexpected error: {e}')
        "

  security-check:
    runs-on: ubuntu-latest  
    name: Security and Best Practices Check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for security best practices
      run: |
        echo "üîí Checking security practices..."
        
        # Check for hardcoded credentials or sensitive data
        if grep -r "password\|secret\|key" --include="*.py" --include="*.sh" --include="*.c" . | grep -v ".git"; then
          echo "‚ö†Ô∏è  Found potential hardcoded credentials - please review"
        else
          echo "‚úÖ No obvious hardcoded credentials found"
        fi
        
        # Check for root requirement documentation
        if grep -q "root" README.md || grep -q "sudo" README.md; then
          echo "‚úÖ Root access requirements are documented"
        fi
        
        # Check for proper error handling in Python
        if grep -q "try:\|except:" scone.py; then
          echo "‚úÖ Python script includes error handling"
        else
          echo "‚ö†Ô∏è  Consider adding error handling to Python script"
        fi

  integration-test:
    runs-on: ubuntu-latest
    name: Integration Test (No Root Required)
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Test script components individually
      run: |
        echo "üîß Testing individual components..."
        
        # Test eBPF code syntax with BCC
        sudo apt-get update
        sudo apt-get install -y python3-bpfcc
        
        python3 -c "
        try:
            from bcc import BPF
            import tempfile
            import os
            
            # Test if BPF can at least parse the eBPF code
            with open('scone_ebpf.c', 'r') as f:
                ebpf_code = f.read()
            
            # Try to create BPF object (may fail due to permissions, but syntax should be OK)
            try:
                b = BPF(text=ebpf_code)
                print('‚úÖ eBPF code syntax validated successfully')
            except Exception as e:
                if 'Operation not permitted' in str(e) or 'capabilities' in str(e):
                    print('‚úÖ eBPF syntax OK (expected permission error in CI)')
                else:
                    print(f'‚ö†Ô∏è  eBPF issue: {e}')
        except ImportError:
            print('‚ö†Ô∏è  BCC not available for syntax checking')
        "
        
        echo "üéØ All testable components verified!" 